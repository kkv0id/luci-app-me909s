#!/bin/sh
. /lib/me909s.sh

[ -n "$INCLUDE_ONLY" ] || {
    . /lib/functions.sh
    . ../netifd-proto.sh
    init_proto "$@"
}

sleep_with_unlock() {
    unlock_modem_at "me909s"
    sleep $1
}

proto_ecm_init_config() {
    no_device=1
    available=1
    proto_config_add_string "device:device"
    proto_config_add_string apn
    proto_config_add_string auth
    proto_config_add_string username
    proto_config_add_string password
    proto_config_add_string pincode
    proto_config_add_string delay
    proto_config_add_string pdptype
    proto_config_add_int profile
    proto_config_add_defaults
}


proto_ecm_setup() {
    local interface=$1
    
    local ctl_device dat_device devname devpath ifname operator pid timeout
    
    local device apn auth username password pincode delay pdptype profile $PROTO_DEFAULT_OPTIONS
    
    local __output __res __sim_state __stat __cmd
    json_get_vars device apn auth username password pincode delay pdptype profile $PROTO_DEFAULT_OPTIONS
    
    [ "$metric" = "" ] && metric="0"
    
    [ -n "$profile" ] || profile=2
    
    ctl_device=$(uci_get_state network "$interface" ctl_device)
    dat_device=$(uci_get_state network "$interface" dat_device)
    # : ${device:=$ctl_device}
    [ -n "$device" ] || device=$ctl_device

    [ -n "$device" ] || {
        echo "No control device specified"
        proto_notify_error "$interface" NO_DEVICE
        proto_set_available "$interface" 0
        return 1
    }

    [ -n "$delay" ] || delay=10
    timeout=0
    while [ ! -e "$ctl_device" ] ;do
        sleep 1
        timeout=$((timeout+1))
        if [ $timeout -gt $delay ];then
            echo "Control device not valid"
            proto_notify_error "$interface" NO_DEVICE
            proto_set_available "$interface" 0
            return 1
        fi
    done
    
    devname="$(basename "$device")"
    devpath="$(readlink -f /sys/class/tty/$devname/device)"
    ifname="$( ls "$devpath"/../../*/net )"
    
    pid=$(pgrep -f "/lib/me909s.sh cellular")
    [ -n "$pid" ] && kill $pid
    
    modem_hw_info "$ctl_device" "$interface"
    
    lock_modem_at $$ "me909s"
    [ $? -eq 0 ] || {
        proto_notify_error "$interface" "LOCK_AT_ERROR"
        sleep 1
        return 1
    }
    __sim_state="$(uci_get_state network "$interface" sim_state)"
    case "$__sim_state" in
        "READY")
        ;;
        "SIM PIN")
            __output=''
            if [[ ${#pincode} -eq 4 && -z "${pincode//[0-9]/}" ]]; then
                __output=$(send_at "$device" "AT+CPIN=${pincode}")
            fi
            if [ $? -ne 0 ] && [ -z "$__output" ]; then
                proto_notify_error "$interface" "PIN_FAILED"
                proto_block_restart "$interface"
                return 1
            fi
        ;;
        "ERROR")
            proto_notify_error "$interface" "SIM_ERROR"
            # proto_block_restart "$interface"
            sleep_with_unlock 3
            return 1
        ;;
        *)
            proto_notify_error "$interface" "${__sim_state/ /_}"
            proto_block_restart "$interface"
            return 1
    esac
    
    __output=$(send_at "$device" "AT+COPS?")
    [ $? -eq 0 ] && {
        __res=$(echo "$__output" | awk -F': ' '/\+COPS: / {print $2}')
        operator=$(echo "$__res" |cut -d',' -f3 | tr -d '"')
    }
    [ -n "$operator" ] && [ -z "${operator//[0-9]/}" ] && [ ${#operator} -eq 5 ] || {
        proto_notify_error "$interface" "GET_OPERATOR_ERROR"
        sleep_with_unlock 2
        return 1
    }
    uci_toggle_state network $interface "operator" "$operator"
    
    if [ -n "${pdptype}" ];then
        __output=$(send_at "$device" "AT+CGDCONT?")
        if [ $? -eq 0 ];then
            local __pdpval
            __res=$(echo "$__output" | awk -F': ' -v pdp="$profile" '$0 ~ "\\+CGDCONT: " pdp {print $2}')
            __pdpval=$(echo "$__res" |cut -d',' -f2 | tr -d '"')
            if [ "${__pdpval}"X != "${pdptype}"X ];then
                send_at "$device" "AT+CGDCONT=${profile},\"${pdptype}\"" >/dev/null
                [ $? -eq 0 ] || {
                    proto_notify_error "$interface" "PDPTYPE_ERROR"
                    sleep_with_unlock 2
                    return 1
                }
            fi
        fi
    fi
    
    __output=$(send_at "$device" "AT+CGREG?")
    [ $? -eq 0 ] && {
        __res=$(echo "$__output" | awk -F': ' '/\+CGREG: / {print $2}')
        __stat=$(echo "$__res" |cut -d',' -f2)
    }
    [ "$__stat"X = "1"X ] || [ "$__stat"X = "5"X ] || {
        proto_notify_error "$interface" "NET_REG_ERROR"
        sleep_with_unlock 2
        return 1
    }
    
    local apn_val=""
    if [ -n "$apn" ];then
        [ "$apn" = "auto" ] || apn_val="$apn"
    fi
    
    if [ -n "${apn_val}" ];then
        case "$auth" in
            "pap") auth=1 ;;
            "chap") auth=2 ;;
            *) auth=0 ;;
        esac
        if [ ${#username} -gt 0 -a ${#password} -gt 0 ];then
            __cmd="AT^NDISDUP=${profile},1,\"${apn_val}\",\"${username}\",\"${password}\",$auth"
        else
            __cmd="AT^NDISDUP=${profile},1,\"${apn_val}\""
        fi
    else
        __cmd="AT^NDISDUP=${profile},1"
    fi
    send_at "$device" "$__cmd" >/dev/null
    [ $? -eq 0 ] || {
        proto_notify_error "$interface" "NDISDUP_ERROR"
        sleep_with_unlock 3
        return 1
    }
    
    unlock_modem_at "me909s"
    
    echo "Setting up $ifname"
    proto_init_update "$ifname" 1
    proto_send_update "$interface"
    
    [ "$pdptype" = "IP" -o "$pdptype" = "IPV6" -o "$pdptype" = "IPV4V6" ] || pdptype="IP"
    
    [ "$pdptype" = "IP" -o "$pdptype" = "IPV4V6" ] && {
        json_init
        json_add_string name wwan_4
        json_add_string ifname "@$interface"
        json_add_string proto "dhcp"
        proto_add_dynamic_defaults
        json_close_object
        ubus call network add_dynamic "$(json_dump)"
    }
    
    [ "$pdptype" = "IPV6" -o "$pdptype" = "IPV4V6" ] && {
        json_init
        json_add_string name wwan_6
        json_add_string ifname "@$interface"
        json_add_string proto "dhcpv6"
        json_add_string extendprefix 1
        proto_add_dynamic_defaults
        json_close_object
        ubus call network add_dynamic "$(json_dump)"
    }
    
    /lib/me909s.sh cellular "$ctl_device" "$interface" &
}


proto_ecm_teardown() {
    local interface=$1
    
    local device profile
    
    json_get_vars device profile
    
    [ -n "$device" ] || device=$(uci_get_state network "$interface" ctl_device)
    
    [ -n "$profile" ] || profile=2
    [ -n "$device" ] && send_at "$device" "AT^NDISDUP=${profile},0" >/dev/null || {
        echo "Failed to disconnect"
        proto_notify_error "$interface" DISCONNECT_FAILED
        return 1
    }
    proto_init_update "*" 0
    proto_send_update "$interface"
}

[ -n "$INCLUDE_ONLY" ] || {
    add_protocol ecm
}